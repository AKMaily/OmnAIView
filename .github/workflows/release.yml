
# ==========================================================
#  Release-Workflow
#  • Läuft nur nach erfolgreichem Build-Workflow auf master
#  • Holt Artefakte, bump’t Version & erstellt Release
# ==========================================================

name: Release

on:
  workflow_run:
    workflows: ["Build-Windows-Binary"]   # exakt der name: deines Build-Workflows
    types: [completed]

permissions:
  contents: write
  pull-requests: read

env:
  NODE_VERSION: 20
  BUILD_SHA: ${{ github.event.workflow_run.head_sha }}

jobs:
  release:
    # -- Startbedingungen ----------------------------------------------------
    if: >
      ${{
        github.event.workflow_run.conclusion == 'success' &&
        github.event.workflow_run.event       == 'push'   &&   # nur Build-Runs, die durch "push" kamen
        github.event.workflow_run.head_branch == 'master'      # und zwar auf master (Merge-Commit)
      }}
    runs-on: ubuntu-latest

    steps:
      # 1) Code des gemergten Commits auschecken ------------------------------
      - uses: actions/checkout@v4
        with:
          ref: ${{ env.BUILD_SHA }}

      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      # 2) PR-Labels lesen ----------------------------------------------------
      - name: Determine release type from PR labels
        id: rel
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const commitSha = process.env.BUILD_SHA;

            const prs = await github.rest.repos.listPullRequestsAssociatedWithCommit({
              owner, repo, commit_sha: commitSha
            });

            if (!prs.data.length) {

              core.setFailed('Kein PR zu diesem Commit gefunden.');
              return;
            }

         
            const labels = prs.data[0].labels.map(l => l.name);
         
            const bump = ['major','minor','patch']
              .find(t => labels.includes(`semver:${t}`)) || 'patch';
            core.setOutput('bump', bump);

            const pre = ['alpha','beta']
              .find(p => labels.includes(`prerelease:${p}`)) || '';
            core.setOutput('pre', pre);


      - name: Stop if release:skip
        if: env.SKIP_RELEASE == 'true'
        run: echo "Skip release" && exit 0

      - name: Bump version
        id: bump
        shell: bash
        run: |
          set -euo pipefail
          git fetch --prune --tags

          latest=$(git tag -l "v*" --sort=-v:refname | head -n1 || echo "v0.0.0")
          echo "Latest: $latest"

          preflag=""
          if [[ -n "${{ steps.rel.outputs.pre }}" ]]; then
            preflag="--preid ${{ steps.rel.outputs.pre }}"
          fi

          new=$(npx semver -c "$latest" --increment ${{ steps.rel.outputs.bump }} $preflag)
          echo "new_version=$new" >> "$GITHUB_OUTPUT"

      - name: Create git tag
        run: |
          git tag ${{ steps.bump.outputs.new_version }} ${{ env.BUILD_SHA }}
          git push origin ${{ steps.bump.outputs.new_version }}

      # 4) Artefakte des Build-Runs herunterladen ----------------------------
      - uses: actions/download-artifact@v4
        with:
          run_id: ${{ github.event.workflow_run.id }}
          name: OmnaiView-Windows-${{ env.BUILD_SHA }}

      # 5) Release erstellen & Installer anhängen ----------------------------
      - uses: softprops/action-gh-release@v2
        with:
          tag_name:               ${{ steps.bump.outputs.new_version }}
          name:                   ${{ steps.bump.outputs.new_version }}
          prerelease:             ${{ steps.rel.outputs.pre != '' }}
          generate_release_notes: true
          files: |
            electron/out/make/squirrel.windows/x64/*.exe
            electron/out/make/squirrel.windows/x64/*.nupkg
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
