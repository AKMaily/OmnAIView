name: Release

on:
  push:
    branches: [master]

permissions:
  contents: write 
  pull-requests: read

env:
  NODE_VERSION: 20

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Determine release type from PR labels
        id: release_type
        uses: actions/github-script@v7
        with:
          script: |
            const pr = await github.rest.repos.listPullRequestsAssociatedWithCommit({
              owner: context.repo.owner,
              repo:  context.repo.repo,
              commit_sha: context.sha
            });
            if (!pr.data.length) {
              core.setFailed('Kein PR zu diesem Commit gefunden.');
              return;
            }
            const labels = pr.data[0].labels.map(l => l.name);
            const releaseSkip = labels.includes('release:skip');
            if (releaseSkip) { core.exportVariable('SKIP_RELEASE', 'true'); return; }

            const types = ['major','minor','patch'];
            const type = types.find(t => labels.includes(`semver:${t}`)) || 'patch';
            core.setOutput('bump', type);

            const pre = ['alpha','beta'].find(p => labels.includes(`prerelease:${p}`));
            if (pre) core.setOutput('prerelease', pre);

      - name: Stop if release:skip
        if: env.SKIP_RELEASE == 'true'
        run: echo "Skip release" && exit 0

      - name: Bump version
        id: bump
        run: |
          git fetch --tags
          latest=$(git tag --list "v*" --sort=-v:refname | head -n 1 || echo "v0.0.0")
          echo "Current version: $latest"
          npx semver -c "$latest"                             \
            --increment ${{ steps.release_type.outputs.bump }} \
            ${{ steps.release_type.outputs.prerelease && `--preid ${steps.release_type.outputs.prerelease}` || '' }} \
          | tee new_version
          echo "new_version=$(cat new_version)" >> $GITHUB_OUTPUT

      - name: Create tag
        run: |
          git tag ${{ steps.bump.outputs.new_version }}
          git push origin ${{ steps.bump.outputs.new_version }}

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.bump.outputs.new_version }}
          name:     ${{ steps.bump.outputs.new_version }}
          prerelease: ${{ steps.release_type.outputs.prerelease != '' }}
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload installers from previous job
        uses: actions/download-artifact@v4
        with:
          name: OmnaiView-Windows-${{ github.sha }}
      - name: Attach assets to Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.bump.outputs.new_version }}
          files: |
            electron/out/make/squirrel.windows/x64/*.exe
            electron/out/make/squirrel.windows/x64/*.nupkg

