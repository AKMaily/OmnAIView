name: Release

on:
  push:
    branches:
      - master        # ggf. auf "main" anpassen

permissions:
  contents: write     # Tags + Release anlegen
  pull-requests: read # PR-Labels auswerten

env:
  NODE_VERSION: 20

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      # --------------------------------------------------
      # 1) Repo auschecken & Node-Runtime vorbereiten
      # --------------------------------------------------
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      # --------------------------------------------------
      # 2) PR-Labels analysieren (semver-Bump, prerelease, skip)
      # --------------------------------------------------
      - name: Determine release type from PR labels
        id: release_type
        uses: actions/github-script@v7
        with:
          script: |
            const pr = await github.rest.repos.listPullRequestsAssociatedWithCommit({
              owner: context.repo.owner,
              repo:  context.repo.repo,
              commit_sha: context.sha
            });

            if (!pr.data.length) {
              core.setFailed('Kein PR zu diesem Commit gefunden.');
              return;
            }

            const labels = pr.data[0].labels.map(l => l.name);

            if (labels.includes('release:skip')) {
              core.exportVariable('SKIP_RELEASE', 'true');
              return;
            }

            const bump = ['major', 'minor', 'patch']
              .find(t => labels.includes(`semver:${t}`)) || 'patch';
            core.setOutput('bump', bump);

            const prerelease = ['alpha', 'beta']
              .find(p => labels.includes(`prerelease:${p}`)) || '';
            core.setOutput('prerelease', prerelease);

      - name: Stop if release:skip
        if: env.SKIP_RELEASE == 'true'
        run: echo "Skip release" && exit 0

      # --------------------------------------------------
      # 3) Version hochzählen & ausgeben
      # --------------------------------------------------
      - name: Bump version
        id: bump
        shell: bash
        run: |
          set -euo pipefail
          git fetch --prune --tags
          latest=$(git tag -l "v*" --sort=-v:refname | head -n 1 || echo "v0.0.0")
          echo "Aktuelle Version: $latest"

          preflag=""
          if [[ -n "${{ steps.release_type.outputs.prerelease }}" ]]; then
            preflag="--preid ${{ steps.release_type.outputs.prerelease }}"
          fi

          new=$(npx semver -c "$latest" --increment ${{ steps.release_type.outputs.bump }} $preflag)
          echo "Neue Version: $new"
          echo "new_version=$new" >> "$GITHUB_OUTPUT"

      # --------------------------------------------------
      # 4) Git-Tag erstellen & pushen
      # --------------------------------------------------
      - name: Create tag
        run: |
          git tag ${{ steps.bump.outputs.new_version }}
          git push origin ${{ steps.bump.outputs.new_version }}

      # --------------------------------------------------
      # 5) Release anlegen (mit Auto-Release-Notes)
      # --------------------------------------------------
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.bump.outputs.new_version }}
          name:     ${{ steps.bump.outputs.new_version }}
          prerelease: ${{ steps.release_type.outputs.prerelease != '' }}
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # --------------------------------------------------
      # 6) Artefakte aus Build-Workflow anhängen
      # --------------------------------------------------
      - name: Download Windows installer artifact
        uses: actions/download-artifact@v4
        with:
          name: OmnaiView-Windows-${{ github.sha }}

      - name: Attach assets to Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.bump.outputs.new_version }}
          files: |
            electron/out/make/squirrel.windows/x64/*.exe
            electron/out/make/squirrel.windows/x64/*.nupkg
