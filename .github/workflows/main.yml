name: CI-and-Release

on:
  pull_request:
    branches: ["**"]
  push:
    branches: ["master"]          # nur Merge-Commits
  workflow_dispatch:

env:
  NODE_VERSION: 20

permissions:
  contents: write
  pull-requests: read
  actions: read

jobs:
# ──────────────────────────────────────────────────────────
# 1) Windows-Build
# ──────────────────────────────────────────────────────────
  build-windows:
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm
          cache-dependency-path: package-lock.json

      - name: Cache node_modules
        id: cache
        uses: actions/cache@v4
        with:
          path: node_modules
          key: node_modules-${{ runner.os }}-${{ runner.arch }}-node_${{ env.NODE_VERSION }}-${{ hashFiles('package-lock.json') }}

      - name: Install deps
        if: steps.cache.outputs.cache-hit != 'true'
        run: npm ci --no-audit --no-fund

      - name: Build
        run: npm run build

      - name: Angular tests
        working-directory: angular-frontend
        run: npx ng test --watch=false

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: OmnaiView-Windows-${{ github.sha }}
          path: |
            electron/out/make/squirrel.windows/x64/RELEASES
            electron/out/make/squirrel.windows/x64/*.nupkg
            electron/out/make/squirrel.windows/x64/*.exe

# ──────────────────────────────────────────────────────────
# 2) Release  – nur bei push-Event & erfolgreichem Build
# ──────────────────────────────────────────────────────────
  release:
    needs: build-windows
    if: github.event_name == 'push'
    runs-on: ubuntu-latest

    steps:
      # 2.1 Commit des Merge-Builds auschecken
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.sha }}

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      # 2.2 PR-Labels auswerten
      - name: Determine release type from PR labels
        id: rel
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const prs = await github.rest.repos.listPullRequestsAssociatedWithCommit({
              owner,
              repo,
              commit_sha: context.sha
            });

            if (!prs.data.length) {
              core.setFailed('Kein PR zu diesem Commit gefunden.');
              return;
            }

            const labels = prs.data[0].labels.map(l => l.name);

            if (labels.includes('release:skip')) {
              core.exportVariable('SKIP_RELEASE', 'true');
              return;
            }

            const bump = ['major', 'minor', 'patch']
              .find(t => labels.includes(`semver:${t}`)) ?? 'patch';
            core.setOutput('bump', bump);

            const pre = ['alpha', 'beta']
              .find(p => labels.includes(`prerelease:${p}`)) ?? '';
            core.setOutput('pre', pre);

      - name: Stop if release:skip
        if: env.SKIP_RELEASE == 'true'
        run: echo "Skip release" && exit 0

      # 2.3 Version erhöhen & Tag erstellen
      - name: Bump version
        id: bump
        shell: bash
        run: |
          set -euo pipefail
          git fetch --prune --tags

          # höchstes SemVer (inkl. prerelease), unabhängig vom v-Präfix
          latest=$(git tag -l \
                   | sed 's/^v//' \
                   | grep -E '^[0-9]+\.[0-9]+\.[0-9]+(-[0-9A-Za-z\.-]+)?$' \
                   | sort -V \
                   | tail -n1)
          [[ -z "$latest" ]] && latest="0.0.0"
          echo "Letztes Tag numerisch: $latest"

          bump="${{ steps.rel.outputs.bump }}"
          pre="${{ steps.rel.outputs.pre }}"
          preflag=""
          [[ -n "$pre" ]] && preflag="--preid $pre"

          next=$(npx semver "$latest" -i "$bump" $preflag)
          new_tag="v$next"                     # immer mit v-Präfix

          echo "new_tag=$new_tag"   >> "$GITHUB_OUTPUT"
          echo "plain_ver=$next"    >> "$GITHUB_OUTPUT"

      - name: Create git tag
        shell: bash
        run: |
          TAG=${{ steps.bump.outputs.new_tag }}
          if git rev-parse -q --verify "refs/tags/$TAG" >/dev/null; then
            echo "❌ Tag $TAG existiert bereits."
            exit 1
          fi
          git tag "$TAG"
          git push origin "$TAG"

      # 2.4 package.json-Versionen patchen
      - name: Update package.json versions
        shell: bash
        run: |
          set -euo pipefail
          VER=${{ steps.bump.outputs.plain_ver }}
          for f in angular-frontend/package.json electron/package.json; do
            if [[ -f "$f" ]]; then
              echo "✏️  $f -> $VER"
              npx json -I -f "$f" -e "this.version='${VER}'"
            else
              echo "⚠️  $f nicht gefunden"
              exit 1
            fi
          done

      - name: Commit bumped versions
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          branch: master
          commit_message: "chore: bump version to ${{ steps.bump.outputs.new_tag }} [skip ci]"
          file_pattern: |
            angular_frontend/package.json
            electron/package.json

      # 2.5 Artefakt downloaden & Release erstellen
      - name: Download Windows artifact
        uses: actions/download-artifact@v4
        with:
          name: OmnaiView-Windows-${{ github.sha }}

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.bump.outputs.new_tag }}
          name:     ${{ steps.bump.outputs.new_tag }}
          prerelease: ${{ steps.rel.outputs.pre != '' }}
          generate_release_notes: true
          files: |
            OmnaiView-Windows-${{ github.sha }}/electron/out/make/squirrel.windows/x64/*.exe
            OmnaiView-Windows-${{ github.sha }}/electron/out/make/squirrel.windows/x64/*.nupkg
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
