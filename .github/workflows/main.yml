# ==========================================================
#  CI + Release in einem Workflow
#  • build-windows:   läuft bei pull_request & push
#  • release:        läuft nur nach erfolgreichem Build
#                    und nur bei push-Events auf master
# ==========================================================

name: CI-and-Release

on:
  pull_request:                 # PR-Builds
    branches: ["**"]
  push:                         # Commits (inkl. Merge-Commit)
    branches: ["master"]
    tags: ["**"]                # falls du Tag-Builds behalten willst
  workflow_dispatch:

env:
  NODE_VERSION: 20

permissions:
  contents: write               # Tag + Release
  pull-requests: read
  actions: read                 # für Cache usw.

jobs:
# ----------------------------------------------------------------------
# 1) Windows-Build (unverändert)
# ----------------------------------------------------------------------
  build-windows:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
        name: Checkout

      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm
          cache-dependency-path: package-lock.json

      - name: Cache node_modules
        id: cache
        uses: actions/cache@v4
        with:
          path: node_modules
          key: node_modules-${{ runner.os }}-${{ runner.arch }}-node_${{ env.NODE_VERSION }}-${{ hashFiles('package-lock.json') }}

      - name: Install deps
        if: steps.cache.outputs.cache-hit != 'true'
        run: npm ci --no-audit --no-fund

      - name: Build
        run: npm run build

      - name: Angular tests
        working-directory: angular-frontend
        run: npx ng test --watch=false

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: OmnaiView-Windows-${{ github.sha }}
          path: |
            electron/out/make/squirrel.windows/x64/RELEASES
            electron/out/make/squirrel.windows/x64/*.nupkg
            electron/out/make/squirrel.windows/x64/*.exe

# ----------------------------------------------------------------------
# 2) Release – läuft nur bei push auf master UND nach erfolgreichem Build
# ----------------------------------------------------------------------
  release:
    needs: build-windows
    if: github.event_name == 'push'        # PR-Builds werden übersprungen
    runs-on: ubuntu-latest

    steps:
      # -------- Checkout exakt denselben Commit -----------
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.sha }}

      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      # -------- PR-Labels bestimmen -----------------------
      - name: Determine release type from PR labels
        id: rel
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const prs = await github.rest.repos.listPullRequestsAssociatedWithCommit({
              owner, repo, commit_sha: context.sha
            });

            if (!prs.data.length) {
              core.setFailed('Kein PR zu diesem Commit gefunden.');
              return;
            }

            const labels = prs.data[0].labels.map(l => l.name);

            if (labels.includes('release:skip')) {
              core.exportVariable('SKIP_RELEASE', 'true');
              return;
            }

            const bump = ['major','minor','patch']
              .find(t => labels.includes(`semver:${t}`)) ?? 'patch';
            core.setOutput('bump', bump);

            const pre = ['alpha','beta']
              .find(p => labels.includes(`prerelease:${p}`)) ?? '';
            core.setOutput('pre', pre);

      - name: Stop if release:skip
        if: env.SKIP_RELEASE == 'true'
        run: echo "Skip release" && exit 0

      # -------- Version bump & Tag ------------------------
      - name: Bump version
        id: bump
        shell: bash
        run: |
          set -euo pipefail
          git fetch --prune --tags
          latest=$(git tag -l "v*" --sort=-v:refname | head -n1 || echo "v0.0.0")
          echo "Latest tag: $latest"

          preflag=""
          if [[ -n "${{ steps.rel.outputs.pre }}" ]]; then
            preflag="--preid ${{ steps.rel.outputs.pre }}"
          fi

          new=$(npx semver -c "$latest" --increment ${{ steps.rel.outputs.bump }} $preflag)
          echo "new_version=$new" >> "$GITHUB_OUTPUT"

      - name: Create git tag
        run: |
          git tag ${{ steps.bump.outputs.new_version }}
          git push origin ${{ steps.bump.outputs.new_version }}

       # 3.1) Version in beiden package.jsons aktualisieren
      - name: Update package.json versions
        shell: bash
        run: |
          NEW="${{ steps.bump.outputs.new_version }}"
          # Angular-Frontend
          npx json -I -f angular-frontend/package.json -e "this.version='${NEW}'"
          # Electron-Root (ggf. Pfad anpassen)
          npx json -I -f electron/package.json -e "this.version='${NEW}'"

      - name: Commit bumped versions
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          # Ziel-Branch angeben → kein detached-HEAD-Fehler
          branch: master                    # oder ${{ github.ref_name }}
          commit_message: |
            chore: bump version to v${{ steps.bump.outputs.new_version }} [skip ci]
          file_pattern: |
            angular-frontend/package.json
            electron/package.json


      # -------- Artefakte vom Build-Job holen -------------
      - uses: actions/download-artifact@v4
        with:
          name: OmnaiView-Windows-${{ github.sha }}

      # -------- GitHub-Release anlegen + Installer anhängen
      - uses: softprops/action-gh-release@v2
        with:
          tag_name:               ${{ steps.bump.outputs.new_version }}
          name:                   ${{ steps.bump.outputs.new_version }}
          prerelease:             ${{ steps.rel.outputs.pre != '' }}
          generate_release_notes: true
          files: |
            electron/out/make/squirrel.windows/x64/*.exe
            electron/out/make/squirrel.windows/x64/*.nupkg
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
